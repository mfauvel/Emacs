#+TITLE: Mathieu Fauvel Emacs Configuration
#+OPTIONS: toc:4 h:4 creator:t
#+PROPERTY: tangle init.el

* Initialization
** Initialize init file
#+BEGIN_SRC emacs-lisp
;; Keep track of loading time
(defconst emacs-start-time (current-time))
(require 'package)
(package-initialize)

(setq package-check-signature nil)
(setq package-enable-at-startup nil)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ("melpa" . "http://melpa.org/packages/")
			 ("org" . "http://orgmode.org/elpa/")))

(let ((elapsed (float-time (time-subtract (current-time) emacs-start-time))))
  (message "Loaded packages in %.3fs" elapsed))

(require 'cl-lib)

#+END_SRC
** Install package with use-package
#+BEGIN_SRC emacs-lisp
(defvar mf/install-packages
  '(
    use-package
    ;;Editor configuration
    multiple-cursors
    cl-lib
    powerline
    pdf-tools
    yasnippet
    helm
    ;; Org mode
    org
    org-plus-contrib
    org-ref
    ;; Auctex
    auctex
    auto-complete-auctex
    bibtex
    ;; Programming
    elpy
    projectile
    auto-complete
    magit
    ;; Misc
    emms
    wttrin
    gnuplot
    )
  )

(defvar packages-refreshed? nil)

(dolist (pack mf/install-packages)
  (unless (package-installed-p pack)
    (unless packages-refreshed?
      (package-refresh-contents)
      (setq packages-refreshed? t))
    (unwind-protect
        (condition-case ex
            (package-install pack)
          ('error (message "Failed to install package [%s], caught exception: [%s]"
                           pack ex)))
      (message "Installed %s" pack))))
;; Load use-package, used for loading packages everywhere else
(require 'use-package)
;; Set to t to debug package loading
(setq use-package-verbose nil)
#+END_SRC

* Editor configuration
** Basics configuration
#+BEGIN_SRC emacs-lisp
;; See brackets and so don
(show-paren-mode 1)
(setq show-paren-style 'mixed) ; highlight brackets if visible, else entire expression
(electric-pair-mode 1)

;; Set font
(set-face-attribute 'default nil :font "DejaVu Sans Mono-10")

;; Prevent the cursor from blinking
(blink-cursor-mode 0)

;; Remove messages that you don't read
(setq initial-scratch-message "")
(setq inhibit-startup-message t)

;; No sound !
(setq visible-bell t)

;; I need my entire screen
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)
(setq scroll-margin 3)

;; See the column number
(column-number-mode t)

;; Highlight current line
(when window-system (global-hl-line-mode))

;; Highlights things
(use-package volatile-highlights
:ensure t
:defer t
:config
  (volatile-highlights-mode t))

;; Upcase/Downcase region 
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; Always (y or n)
(fset 'yes-or-no-p 'y-or-n-p)

;; Revert buffer (sometimes needed)
(global-set-key (kbd "<f5>") 'revert-buffer)

;; Emacs close confirmation
(setq kill-emacs-query-functions
      (cons (lambda () (yes-or-no-p "Really Quit Emacs? "))
	    kill-emacs-query-functions))
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :ensure cl-lib
  :bind (("C-c m n" . mc/mark-next-like-this)
	 ("C-c m a" . mc/mark-all-like-this)
	 ("C-c m l" . mc/edit-lines))
  :config (progn
	    (provide 'init-multiple-cursors))
  )
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :config (powerline-default-theme)
  )
#+END_SRC
** Coding System
#+BEGIN_SRC emacs-lisp
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC
** Spelling
#+BEGIN_SRC emacs-lisp
;; Standard location of personal dictionary
(add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
(add-hook 'org-mode-hook 'flyspell-mode)
(add-hook 'latex-mode-hook 'flyspell-mode)
(add-hook 'LaTex-mode-hook 'flyspell-mode)
;; You should have aspell-fr and aspell-en packages installed
(let ((langs '("english" "francais")))
  (setq lang-ring (make-ring (length langs)))
  (dolist (elem langs) (ring-insert lang-ring elem)))
(defun cycle-ispell-languages ()
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)))

(global-set-key [f1] 'cycle-ispell-languages)
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :init (progn
  	  (setq dired-dwim-target t)
	  (setq dired-listing-switches "-alh")
          (put 'dired-find-alternate-file 'disabled nil)
	  (setq ls-lisp-dirs-first t)
  )
  :config (progn
	  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
	  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file ".."))))  ; was dired-up-directory
          
  )
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (helm-mode 1)
      (setq helm-candidate-number-limit 100)
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01
            helm-yas-display-key-on-candidate t
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t
	    helm-buffers-fuzzy-matching t
	    helm-recentf-fuzzy-match t
	    helm-ff-file-name-history-use-recentf t)
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
      (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
      (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
      )
    :bind (       
           ("C-c h" . helm-mini)
           ("C-h a" . helm-apropos)
           ("C-x C-b" . helm-buffers-list)
           ("C-x b" . helm-buffers-list)
           ("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x c o" . helm-occur)))
#+END_SRC

** Pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t :ensure org-pdfview
  :defer t
  :init (pdf-tools-install)
  :config (progn 
	    (setq revert-without-query (quote (".*.pdf")))
	    (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
	    )
  )
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:config (yas-global-mode 1)
)
#+END_SRC
* Org mode
** Basic configuration
#+BEGIN_SRC emacs-lisp
(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure org-plus-contrib
  :defer t
  :bind (("C-c a". org-agenda)
	 ("C-c l" . org-store-link)
	 ("C-c c" . org-capture))
  :config (progn
	    (use-package org-install)
	    (use-package ox)
            (use-package ox-beamer)
            
	    (setq org-log-done t)
	    (setq org-startup-indented t)
	    (setq org-agenda-files
		  (quote
		   ("~/Documents/Org_Files/todo.org")))
	    (setq org-export-htmlize-output-type 'css)
	    (setq org-src-fontify-natively t)
	    (setq org-src-preserve-indentation t)
            (setq org-confirm-babel-evaluate nil)
	    (org-babel-do-load-languages
	     'org-babel-load-languages
	     '((python . t)
	       (latex . t)
	       (sh . t)
	       (calc . t)
	       (ditaa .t)
	       (octave .t)
               (org .t)
	       (lisp .t)))
	    (setq org-latex-listings 'minted)
	    (setq org-latex-minted-options
		  '(("fontsize" "\\footnotesize")("obeytabs" "true")("tabsize" "4")("bgcolor" "bg")))
	    (setq org-latex-pdf-process 
		  (quote (
			  "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f" 
			  "bibtex $(basename %b)" 
			  "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f" 
			  "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f")))
	   
	    ;;(setq org-export-latex-listings t)
	    (add-to-list 'org-latex-classes
			 '("koma-article"
			   "\\documentclass{scrartcl}
                \\usepackage{ucs} 
                \\usepackage{array}
                \\usepackage[utf8x]{inputenc}                   
                \\usepackage[T1]{fontenc}
                \\usepackage{lmodern}
                \\usepackage[normalem]{ulem}
                \\usepackage{booktabs}
                \\usepackage{amsmath,amssymb,amsthm}
                \\PassOptionsToPackage{hyphens}{url}
                \\usepackage{hyperref}\\hypersetup{colorlinks=true,hypertexnames=false}
                \\usepackage[osf,sc]{mathpazo}
                \\usepackage{booktabs}
                \\usepackage{graphicx}

                \\usepackage[usenames,dvipsnames]{xcolor}\\definecolor{bg}{rgb}{0.95,0.95,0.95}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
			  ("\\section{%s}" . "\\section*{%s}")
			  ("\\subsection{%s}" . "\\subsection*{%s}")
			  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
			  ("\\paragraph{%s}" . "\\paragraph*{%s}")
			  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
	   
	    (add-to-list 'org-latex-classes
			 '("ieeetran"
			   "\\documentclass{IEEEtran}
                \\usepackage{ucs} 
                \\usepackage{array}
                \\usepackage[utf8x]{inputenc}                   
                \\usepackage[T1]{fontenc}
                \\usepackage{lmodern}
                \\usepackage[normalem]{ulem}
                \\usepackage{booktabs}
                \\usepackage{amsmath,amssymb,amsthm}
                \\PassOptionsToPackage{hyphens}{url}
                \\usepackage{hyperref}\\hypersetup{colorlinks=true,hypertexnames=false}
                \\usepackage{booktabs}
                \\usepackage{graphicx}

                \\usepackage[usenames,dvipsnames]{xcolor}\\definecolor{bg}{rgb}{0.95,0.95,0.95}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
			   ("\\section{%s}" . "\\section*{%s}")
			   ("\\subsection{%s}" . "\\subsection*{%s}")
			   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
			   ("\\paragraph{%s}" . "\\paragraph*{%s}")))
	    ;; Remove hypersetup that sucks whith beamer
	    (setq org-latex-with-hyperref nil)
	    ;; Remove hypersetup that sucks whith beamer
	    (setq org-latex-with-hyperref nil)
	   
	    ;; Hide Marker
	    (setq org-hide-emphasis-markers t)
            
            ;; Use pdf-tools
            (set 'org-file-apps
		 (quote
		  ((auto-mode . emacs)
		   ("\\.pdf\\'" . org-pdfview-open))))
	    
	    ;; Set capture mode ORG-MODE
	    (setq org-capture-templates
		  '(("t" "Todo" entry (file+headline "~/Documents/Org_Files/todo.org" "Tasks")
		     "* %U %?\n")
		    ;; ("a" "ANR" entry (file+datetree "/home/mfauvel/Dropbox/ANR_JCJC/Proposition/work.org")
		    ;;  "* %U %?\n" :clock-in t)
		    ("m" "Mail" entry (file+headline "~/Documents/Org_Files/todo.org" "Mails")
		     "* %U %?\n")))
	    

	    ;; System locale to use for formatting time values.
	    (setq system-time-locale "C")  ; Make sure that the weekdays in the
					; time stamps of your Org mode files and
					; in the agenda appear in English.


	    )
  )
#+END_SRC
** Org-ref
#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :ensure t
  :defer t
  :config ((setq reftex-default-bibliography '("/home/mfauvel/Documents/Recherche/ENSAT/Bibliographie/references.bib"))
	   (setq org-ref-bibliography-notes "/home/mfauvel/Documents/Recherche/ENSAT/Bibliographie/notes.org"
		 org-ref-default-bibliography '("/home/mfauvel/Documents/Recherche/ENSAT/Bibliographie/references.bib")
		 org-ref-pdf-directory "/home/mfauvel/Documents/Recherche/ENSAT/Bibliographie/bibtex-pdfs/")
	   (unless (file-exists-p org-ref-pdf-directory)
	     (make-directory org-ref-pdf-directory t))
	   
	   (setq helm-bibtex-pdf-open-function 'org-open-file)
	   )
  )
#+END_SRC
* Latex
** Auctex
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :ensure t
  :mode ("\\.tex\\'" . latex-mode)
  :commands (latex-mode LaTeX-mode plain-tex-mode)
  :init
  (progn
    (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
    (add-hook 'LaTeX-mode-hook #'visual-line-mode)
    (add-hook 'LaTeX-mode-hook #'flyspell-mode)
    (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook #'outline-minor-mode)
    (setq TeX-auto-save t
	  TeX-parse-self t
	  TeX-save-query nil
	  TeX-PDF-mode t          
	  LaTeX-command-style '(("" "%(PDF)%(latex) -shell-escape %S%(PDFout)")))
    (setq-default TeX-master nil))
    (setq outline-minor-mode-prefix "C-c C-o"))
#+END_SRC
** Bibtex
#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :mode ("\\.bib" . bibtex-mode)
  :init
  (progn
    (setq bibtex-align-at-equal-sign t)
    (add-hook 'bibtex-mode-hook (lambda () (set-fill-column 120)))))

#+END_SRC
* MU4E
#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :load-path "/usr/local/share/emacs/site-lisp/mu4e"
  :bind (("C-x m" . mu4e))
  :defer t
  :config (progn
	    (use-package mu4e-contrib
	    :load-path "/usr/local/share/emacs/site-lisp/mu4e")
	    (use-package smtpmail
	      :load-path "/usr/local/share/emacs/site-lisp/mu4e")
	    (use-package org-mu4e
	      :load-path "/usr/local/share/emacs/site-lisp/mu4e")
	    (use-package org-eldoc
	      :load-path "/usr/local/share/emacs/site-lisp/mu4e")
	    (setq mu4e-maildir "~/Maildir")
	    (setq mu4e-sent-folder   "/sent")
	    (setq mu4e-drafts-folder "/drafts")
	    (setq mu4e-trash-folder  "/trash")
	    
	    ;; allow for updating mail using 'U' in the main view:
	    (setq mu4e-get-mail-command "offlineimap")
	    
	    ;; show full addresses in view message (instead of just names)
	    ;; toggle per name with M-RET
	    (setq mu4e-view-show-addresses t)
	    
	    ;; set IMAP and update
	    (setq
	     mu4e-get-mail-command "offlineimap"   ;;
	     mu4e-update-interval 300)             ;; update every 5 minutes
	    
	    ;; something about ourselves
	    (setq mu4e-user-mail-address-list
		  '(
		    "mathieu.fauvel@ensat.fr"
		    )
		  user-mail-address "mathieu.fauvel@ensat.fr"
		  mu4e-reply-to-address "mathieu.fauvel@ensat.fr"
		  user-full-name  "Mathieu Fauvel"
		  mu4e-compose-signature
		  (concat
		   "Fauvel Mathieu
Director of the Engineering and Numerical Sciences Department
Associated Editor IEEE Journal of Selected Topics in Applied Earth Observations and Remote Sensing
Coordinator of the European IEEE GRSS Chapters

http://fauvel.mathieu.free.fr

INP - ENSAT - DYNAFOR
Avenue de l'Agrobiopole
31326 Castanet-Tolosan, FRANCE.
Phone: +33(0)5 34 32 39 22
"))
	    (setq message-send-mail-function 'smtpmail-send-it
		  starttls-use-gnutls t
		  smtpmail-starttls-credentials '(("mail.inp-toulouse.fr" 587 nil nil))
		  smtpmail-auth-credentials
		  '(("mail.inp-toulouse.fr" 587 "mfauvel" nil))
		  smtpmail-default-smtp-server "mail.inp-toulouse.fr"
		  smtpmail-smtp-server "mail.inp-toulouse.fr"
		  smtpmail-smtp-service 587
		  smtpmail-queue-mail  nil
		  smtpmail-queue-dir  "~/Maildir/queue/cur")
	    
					; don't keep message buffers around
	    (setq message-kill-buffer-on-exit t)
	    (setq mu4e-view-prefer-html t)
	    (setq mu4e-compose-dont-reply-to-self t)
	    
	    (add-hook 'mu4e-view-mode-hook
		      (lambda()
			;; try to emulate some of the eww key-bindings
			(local-set-key (kbd "<tab>") 'shr-next-link)
			(local-set-key (kbd "<backtab>") 'shr-previous-link)))
	    
	    (add-to-list 'mu4e-view-actions
			 '("View in browser" . mu4e-action-view-in-browser) t)
	    
	    ;; make the `gnus-dired-mail-buffers' function also work on
	    ;; message-mode derived modes, such as mu4e-compose-mode
	    (defun gnus-dired-mail-buffers ()
	      "Return a list of active message buffers."
	      (let (buffers)
		(save-current-buffer
		  (dolist (buffer (buffer-list t))
		    (set-buffer buffer)
		    (when (and (derived-mode-p 'message-mode)
			       (null message-sent-message-via))
		      (push (buffer-name buffer) buffers))))
		(nreverse buffers)))
	    
	    (setq gnus-dired-mail-mode 'mu4e-user-agent)
	    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
	    
	    (setq mu4e-compose-keep-self-cc nil)
	    
	    ;; when mail is sent, automatically convert org body to HTML
	    (setq org-mu4e-convert-to-html t)
	    ;; need this to convert some e-mails properly
	    (setq mu4e-html2text-command "w3m -I utf8 -O utf8 -T text/html")
	    
	    (setq mu4e-msg2pdf "/usr/bin/msg2pdf")
	    )
  )

#+END_SRC
* Programming mode
** Python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :config (elpy-enable)
  )
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer t
  :config
  (projectile-global-mode))
#+END_SRC
** Auto-complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config (progn
	    (ac-config-default)
	    (setq ac-auto-start nil)            ; if t starts ac at startup automatically
	    (setq ac-auto-show-menu t)
	    (global-auto-complete-mode t)
            (use-package auto-complete-auctex))  
  :init
  (setq ac-show-menu-immediately-on-auto-complete t))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
)
#+END_SRC
** Hideshow
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure t
  :bind (("C-c <left>" . hs-toggle-hiding)
	 ("C-c <right>" . hs-show-block)
	 )
  :init (add-hook 'prog-mode-hook #'hs-minor-mode)
  )

#+END_SRC
* Misc
** EMMS
Listen musing whith EMACS !
#+BEGIN_SRC emacs-lisp
(use-package emms
  :ensure t
  :defer t
  :config (progn 
	    (emms-all)
	    (emms-default-players)
	    )
  )
#+END_SRC
** Weather
Yes, we can have the weather with EMACS !
#+BEGIN_SRC emacs-lisp
(use-package wttrin
  :ensure t
  :defer t
  :commands (wttrin)
  :init
  (setq wttrin-default-cities '("Toulouse"
                                "Vicdessos")))
#+END_SRC

* TO DO [50%]
- [X] regarder les mode latex et LaTex pour flyspell
- [X] set up gnus-dired
- [X] Configurer latex et outline mode
- [ ] Rajouter =progn= pour tout les =:config=
- [ ] Regarder le tutorial =helm= [[https://tuhdo.github.io/helm-intro.html]]
- [ ] Rajouter les emphasis sur plusieurs lignes.

