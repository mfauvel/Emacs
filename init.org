#+TITLE: Mathieu Fauvel Emacs Configuration
#+OPTIONS: toc:4 h:4 creator:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+PROPERTY: header-args :tangle init.el

* Initialization
** Initialize init file
#+BEGIN_SRC emacs-lisp 
  ;; Keep track of loading time
  (defconst emacs-start-time (current-time))
  (require 'package)
  (package-initialize)

  (setq package-check-signature nil)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")
			   ("gnu" . "http://elpa.gnu.org/packages/")))

  (let ((elapsed (float-time (time-subtract (current-time) emacs-start-time))))
    (message "Loaded packages in %.3fs" elapsed))

  (require 'cl-lib)

#+END_SRC
** Install package with use-package
#+BEGIN_SRC emacs-lisp
(defvar mf/install-packages
  '(
    use-package
    ;;Editor configuration
    multiple-cursors
    cl-lib
    pdf-tools
    yasnippet
    helm-bibtex
    helm
    ivy
    swiper
    counsel
    move-text
    windmove
    dashboard
    telephone-line
    monokai-theme
    dired-quick-sort
    ;; Org mode
    org
    org-plus-contrib
    org-ref
    calfw
    calfw-org
    org-gcal
    htmlize
    epresent
    ;; Auctex
    auctex
    auto-complete-auctex
    bibtex
    reftex
    ;; Programming
    elpy
    find-file-in-project
    auto-complete
    magit
    focus
    ;; Misc
    emms
    wttrin
    gnuplot
    ;; Shell
    exec-path-from-shell
    )
  )

(defvar packages-refreshed? nil)

(dolist (pack mf/install-packages)
  (unless (package-installed-p pack)
    (unless packages-refreshed?
      (package-refresh-contents)
      (setq packages-refreshed? t))
    (unwind-protect
        (condition-case ex
            (package-install pack)
          ('error (message "Failed to install package [%s], caught exception: [%s]"
                           pack ex)))
      (message "Installed %s" pack))))
;; Load use-package, used for loading packages everywhere else
(eval-when-compile
  (require 'use-package))
;; Set to t to debug package loading
(setq use-package-verbose nil)
#+END_SRC

* Editor configuration
** Basics configuration
#+BEGIN_SRC emacs-lisp
;; See brackets
(show-paren-mode 1)
(setq show-paren-style 'mixed) ; highlight brackets if visible, else entire expression
(electric-pair-mode 1)

;; Set font
(set-face-attribute 'default nil :font "-unknown-Inconsolata-normal-normal-normal-*-15-*-*-*-m-0-iso10646-1")

;; Prevent the cursor from blinking
(blink-cursor-mode 0)

;; Remove messages that you don't read
(setq initial-scratch-message "")
(setq inhibit-startup-message t)

;; No sound !
(setq visible-bell t)

;; Init recentf
(setq recentf-auto-cleanup 'never)
(recentf-mode 1)
(setq recentf-max-menu-items 100)

;; I need my entire screen
(scroll-bar-mode 0)
(tool-bar-mode 0)
(menu-bar-mode 0)
(setq scroll-margin 3)

;; See the column number
(column-number-mode t)

;; Highlight current line
(when window-system (global-hl-line-mode))

;; Highlights things
(use-package volatile-highlights
:ensure t
:defer t
:config
  (volatile-highlights-mode t))

;; Upcase/Downcase region 
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; Always (y or n)
(fset 'yes-or-no-p 'y-or-n-p)

;; Revert buffer (sometimes needed)
(global-set-key (kbd "<f5>") 'revert-buffer)

;; Emacs close confirmation
(setq kill-emacs-query-functions
      (cons (lambda () (yes-or-no-p "Really Quit Emacs? "))
	    kill-emacs-query-functions))

;; Overwrite selected text
(delete-selection-mode t)

;; kill-this-buffer
(defun mf/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(global-set-key (kbd "C-x k") 'mf/kill-this-buffer)

;; Split buffer vertically
(setq split-height-threshold nil)
(setq split-width-threshold 0)

;; comment un-comment region
(global-set-key (kbd "C-x c") 'comment-or-uncomment-region)

;; Theme
(use-package monokai-theme
  :ensure t
  :defer t
  :init
  (setq monokai-height-minus-1 1.0
        monokai-height-plus-1 1.0
        monokai-height-plus-2 1.0
        monokai-height-plus-3 1.0
        monokai-height-plus-4 1.0)
  )

;; Switch between theme
(setq cur-theme nil)
(defun cycle-theme ()
  "Cycle between dark theme and light theme"
  (interactive)
  (if cur-theme
      (progn
	(disable-theme 'monokai)
	(setq cur-theme nil)
	)
    (progn
      (load-theme 'monokai t)
      (setq cur-theme t)
      )
    )
  )
;; Bind this to C-x t
(global-set-key (kbd "C-x t") 'cycle-theme)

;; Linum-mode
(global-set-key (kbd "C-x n") 'linum-mode)

;; Move-text
(use-package move-text
  :ensure t
  :config (move-text-default-bindings)
  )

;; Resize window
(global-set-key (kbd "C-x {") 'shrink-window-horizontally)
(global-set-key (kbd "C-x }") 'enlarge-window-horizontally)
(global-set-key (kbd "C-x <down>") 'shrink-window)
(global-set-key (kbd "C-x <up>") 'enlarge-window)

;; ibuffer
(global-set-key (kbd "C-x C-b") 'ibuffer) ;; Use Ibuffer for Buffer List
(setq ibuffer-saved-filter-groups
      (quote (("default"
	       ("dired" (mode . dired-mode))
	       ("org" (name . "^.*org$"))

	       ("web" (or (mode . web-mode) (mode . js2-mode)))
	       ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
	       ("mu4e" (name . "\*mu4e\*"))
	       ("Programming" (or
			       (mode . python-mode)
			       (mode . c++-mode)))
	       ("Tex" (mode . latex-mode))
               ("PDF" (name . "^.*pdf$"))
	       ("emacs" (or
			 (name . "^\\*scratch\\*$")
			 (name . "^\\*Messages\\*$")))
	       ))))
(add-hook 'ibuffer-mode-hook
	  (lambda ()
	    (ibuffer-auto-mode 1)
	    (ibuffer-switch-to-saved-filter-groups "default")))

;; don't show these
					;(add-to-list 'ibuffer-never-show-predicates "zowie")
;; Don't show filter groups if there are no buffers in that group
(setq ibuffer-show-empty-filter-groups nil)

;; Don't ask for confirmation to delete marked buffers
(setq ibuffer-expert t)

;; Visual mode line
(global-visual-line-mode t)
#+END_SRC
** Multiple cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :defer t
  :ensure cl-lib
  :bind (("C-c m n" . mc/mark-next-like-this)
	 ("C-c m a" . mc/mark-all-like-this)
	 ("C-c m l" . mc/edit-lines))
  :config (progn
	    (provide 'init-multiple-cursors))
  )
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(use-package telephone-line
  :config
  (setq telephone-line-lhs
        '((accent . (telephone-line-vc-segment
                     telephone-line-erc-modified-channels-segment
                     telephone-line-process-segment))
          (nil    . (telephone-line-minor-mode-segment
                     telephone-line-buffer-segment))))
  (setq telephone-line-rhs
        '((nil    . (telephone-line-misc-info-segment))
          (accent . (telephone-line-major-mode-segment))
          (evil   . (telephone-line-airline-position-segment))))
  (telephone-line-mode t)
  )
#+END_SRC
** Coding System
#+BEGIN_SRC emacs-lisp
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC
** Spelling
#+BEGIN_SRC emacs-lisp
;; Standard location of personal dictionary
(add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
(add-hook 'org-mode-hook 'flyspell-mode)
(add-hook 'latex-mode-hook 'flyspell-mode)
(add-hook 'LaTex-mode-hook 'flyspell-mode)
;; You should have aspell-fr and aspell-en packages installed
(let ((langs '("english" "francais")))
  (setq lang-ring (make-ring (length langs)))
  (dolist (elem langs) (ring-insert lang-ring elem)))
(defun cycle-ispell-languages ()
  (interactive)
  (let ((lang (ring-ref lang-ring -1)))
    (ring-insert lang-ring lang)
    (ispell-change-dictionary lang)))

(global-set-key [f1] 'cycle-ispell-languages)
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :init (progn
  	  (setq dired-dwim-target t)
	  (setq dired-listing-switches "-alh")
          (put 'dired-find-alternate-file 'disabled nil)
	  (setq ls-lisp-dirs-first t)
  )
  :config (progn
	  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-advertised-find-file
	  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file ".."))))  ; was dired-up-directory
          
  )
(use-package dired-quick-sort
  :ensure t
  :config
  (dired-quick-sort-setup)
  )
#+END_SRC
** Ivy & swiper & counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
    :bind (
	 ("C-x C-f" . counsel-find-file)
	 ("C-x l" . counsel-locate)
	 ("M-x" . counsel-M-x)
	 ("M-y" . counsel-yank-pop)
         ("C-x r". counsel-recentf)
	 )  
  )
(use-package swiper
  :init   (ivy-mode 1)
  :ensure t
  :config
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-use-virtual-buffers t)
  (setq ivy-use-selectable-prompt t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; does not count candidates
  (setq ivy-count-format "")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order)))
  (setq ivy-display-style 'fancy)
  :bind (
	 ("C-s". swiper)
	 ("C-r". swiper)
	 ("C-x b" . ivy-switch-buffer)
	 ("C-c j" . ivy-immediate-done)
  )
  )
#+END_SRC
** Pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t :ensure org-pdfview
  :defer t
  :init (pdf-tools-install)
  :config (progn 
	    (setq revert-without-query (quote (".*.pdf")))
	    (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
	    (setq pdf-annot-activate-created-annotations t)
	    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)()
	    )
  )
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:config (yas-global-mode 1)
:defer t
)
#+END_SRC
** exec-path-from-shell                                           
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config (progn
	    (setq exec-path-from-shell-check-startup-files nil)
	    (exec-path-from-shell-initialize)
	    (exec-path-from-shell-copy-env "PATH")
	    )
  )
#+END_SRC
** htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
:ensure t
)
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config (dashboard-setup-startup-hook)
  )
#+END_SRC
** winner-mode
#+BEGIN_SRC emacs-lisp
;; (use-package winner
;;   :config
;;   (progn
;;     (setq winner-dont-bind-my-keys t) ;; default bindings conflict with org-mode
;;     (global-set-key (kbd "C-c u") 'winner-undo)
;;     (global-set-key (kbd "C-c r") 'winner-redo)
;;     (winner-mode 1))
;;   )
#+END_SRC
** Windmouve
#+BEGIN_SRC emacs-lisp
;; (use-package windmove
;;   ;; :defer 4
;;   :ensure t
;;   :config
;;   ;; use command key
;;   (windmove-default-keybindings 'M)
;;   ;; wrap around at edges
;;   (setq windmove-wrap-around t))
#+END_SRC
** Ace-window
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  )
(use-package ace-window
  :ensure t
  :init
  (bind-key "C-x o" 'ace-window)
  :init
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (setq aw-background t)
  )
#+END_SRC
* Elfeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :ensure   t
  :config (progn
	    (global-set-key (kbd "C-x e") 'elfeed)
	    (setq elfeed-feeds
		  '(("https://ieeexplore.ieee.org/rss/TOC36.XML" TGRS)
                    ("https://ieeexplore.ieee.org/rss/TOC8859.XML" GRSL)
		    )
		  )
	    (setq elfeed-search-title-max-width 150)
	    )
  )

#+END_SRC
* Org mode
** Basic configuration
#+BEGIN_SRC emacs-lisp
(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure org-plus-contrib
  :defer t
  :bind (("C-c a". org-agenda)
	 ("C-c l" . org-store-link)
	 ("C-c c" . org-capture))
  :config (progn
	    (use-package ox)
            (use-package ox-beamer)
            (use-package ox-odt)
	    (use-package ox-bibtex)
	    (use-package ox-org)
	    (use-package ox-extra)
            (use-package ob-ipython
	      :ensure t
	      :defer t)
	    (setq org-log-done t)
	    (setq org-startup-indented t)
	    (setq org-agenda-files (list "~/Documents/Org_Files/calendar.org"
					 "~/Documents/Org_Files/todo.org"
					 "~/Documents/Org_Files/projects.org"
					 ))
	    (setq org-agenda-custom-commands 
		  '(("P" "Parcelle" tags-todo "@parcelle TODO|INPROGRESS"
		     ((org-agenda-overriding-header "Parcelle")))
		    ("M" "Journée Machine Learning" tags-todo "@jmlomp TODO|INPROGRESS"
		     ((org-agenda-overriding-header "Machine Learning OMP")))
		    ("I" "INRA" tags-todo "@inra TODO|INPROGRESS"
		     ((org-agenda-overriding-header "INRA")))
		    ("R" "Review" tags-todo "@review TODO|INPROGRESS"
		     ((org-agenda-overriding-header "Review")))
		    ("G" "Grss" tags-todo "@grss TODO|INPROGRESS"
		     ((org-agenda-overriding-header "GRSS")))
		    ))

	    (setq org-refile-targets '(("~/Documents/Org_Files/journal.org" :maxlevel . 4)))
                                         
	    (setq org-export-htmlize-output-type 'css)
	    (setq org-src-fontify-natively t)
	    (setq org-src-preserve-indentation t)
            (setq org-confirm-babel-evaluate nil)
	    (setq org-export-babel-evaluate nil)

	    (setq org-odt-data-dir "/usr/share/emacs/24.4/etc/org/")
            (setq org-odt-styles-file nil)
	    (org-babel-do-load-languages
	     'org-babel-load-languages
	     '((ipython . t)
	       (latex . t)
	       (shell . t)
	       (calc . t)
	       (ditaa .t)
               (C .t)
	       (octave .t)
               (org .t)
	       (lisp .t)))
	    (setq org-babel-python-command "ipython")
	    (setq org-latex-listings 'minted)
        (add-to-list 'org-latex-minted-langs '(ipython "python"))
	    (setq org-latex-minted-options
		  '(("fontsize" "\\footnotesize")("obeytabs" "true")("tabsize" "4")("bgcolor" "bg")("breaklines" "true")))
	    (setq org-latex-pdf-process
		  '("latexmk -pdflatex='pdflatex -interaction nonstopmode -shell-escape' -pdf -bibtex -f %f"))
	    (setq org-highlight-latex-and-related '(latex))
	    (add-to-list 'org-latex-classes
			 '("koma-article"
			   "\\documentclass{scrartcl}
                \\usepackage{array}
                \\usepackage[utf8]{inputenc}                   
                \\usepackage[T1]{fontenc}
                \\usepackage{lmodern}
                \\usepackage[normalem]{ulem}
                \\usepackage{booktabs}
                \\usepackage{amsmath,amssymb,amsthm}
                \\PassOptionsToPackage{hyphens}{url}
                \\usepackage{hyperref}\\hypersetup{colorlinks=true,hypertexnames=false}
                \\usepackage[osf,sc]{mathpazo}
                \\usepackage{booktabs}
                \\usepackage{graphicx}
                \\usepackage{csquotes}
                \\usepackage[usenames,dvipsnames]{xcolor}\\definecolor{bg}{rgb}{0.95,0.95,0.95}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
			  ("\\section{%s}" . "\\section*{%s}")
			  ("\\subsection{%s}" . "\\subsection*{%s}")
			  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
			  ("\\paragraph{%s}" . "\\paragraph*{%s}")
			  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
	    (add-to-list 'org-latex-classes
			 '("koma-book"
			   "\\documentclass{scrbook}
                \\usepackage{array}
                \\usepackage[utf8]{inputenc}                   
                \\usepackage[T1]{fontenc}
                \\usepackage{lmodern}
                \\usepackage[normalem]{ulem}
                \\usepackage{booktabs}
                \\usepackage{amsmath,amssymb,amsthm}
                \\PassOptionsToPackage{hyphens}{url}
                \\usepackage{hyperref}\\hypersetup{colorlinks=true,hypertexnames=false}
                \\usepackage[osf,sc]{mathpazo}
                \\usepackage{booktabs}
                \\usepackage{graphicx}
                \\usepackage{csquotes}
                \\usepackage[usenames,dvipsnames]{xcolor}\\definecolor{bg}{rgb}{0.95,0.95,0.95}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
			   ("\\part{%s}" . "\\part*{%s}")
			   ("\\chapter{%s}" . "\\chapter*{%s}")
			   ("\\section{%s}" . "\\section*{%s}")
			   ("\\subsection{%s}" . "\\subsection*{%s}")
			   ;; ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
			   ("\\paragraph{%s}" . "\\paragraph*{%s}")
			   ;; ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
			   ))
	    (add-to-list 'org-latex-classes
          '("memoir"
             "\\documentclass{memoir}
                 [NO-DEFAULT-PACKAGES]
                 [EXTRA]"
             ("\\part{%s}" . "\\part*{%s}")
             ("\\chapter{%s}" . "\\chapter*{%s}")
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
	   
	    (add-to-list 'org-latex-classes
			 '("ieeetran"
			   "\\documentclass{IEEEtran}
                \\usepackage{array}
                \\usepackage[utf8]{inputenc}                   
                \\usepackage[T1]{fontenc}
                \\usepackage{lmodern}
                \\usepackage[normalem]{ulem}
                \\usepackage{booktabs}
                \\usepackage{amsmath,amssymb,amsthm}
                \\PassOptionsToPackage{hyphens}{url}
                \\usepackage{hyperref}\\hypersetup{colorlinks=true,hypertexnames=false}
                \\usepackage{booktabs}
                \\usepackage{graphicx}
                \\usepackage{csquotes}

                \\usepackage[usenames,dvipsnames]{xcolor}\\definecolor{bg}{rgb}{0.95,0.95,0.95}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]"
			   ("\\section{%s}" . "\\section*{%s}")
			   ("\\subsection{%s}" . "\\subsection*{%s}")
			   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
			   ("\\paragraph{%s}" . "\\paragraph*{%s}")))
	    ;; Add onlyenv for beamer
	    (add-to-list 'org-beamer-environments-extra
			 '("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}"))
	    (add-to-list 'org-beamer-environments-extra
			 '("visibleenv" "V" "\\begin{visibleenv}%a" "\\end{visibleenv}"))
	    (add-to-list 'org-beamer-environments-extra
			 '("uncoverenv" "U" "\\begin{uncoverenv}%a" "\\end{uncoverenv}"))

	    ;; Add boldface beamer
	    (defun my-beamer-bold (contents backend info)
	      (when (eq backend 'beamer)
		(replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))
	        
                (add-to-list 'org-export-filter-bold-functions 'my-beamer-bold)
	    ;; Remove hypersetup that sucks whith beamer
	    (setq org-latex-with-hyperref nil)

            ;; Multiple lines for emphasis
	    (setcar (nthcdr 4 org-emphasis-regexp-components) 3)
            (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\n,")
            (custom-set-variables `(org-emphasis-alist ',org-emphasis-alist))
	    ;; Hide Marker
	    (setq org-hide-emphasis-markers t)
            
            ;; Use pdf-tools
            (set 'org-file-apps
		 (quote
		  ((auto-mode . emacs)
		   ("\\.pdf\\'" . org-pdfview-open))))
	    
	    ;; Set capture mode ORG-MODE
	    (setq org-capture-templates
		  '(("T" "Todo" entry (file+headline "~/Documents/Org_Files/todo.org" "Tasks")
		     "* TODO %? %^G %^{Effort}p %^{TASK}p"		     
		     :empty-lines 1)
		    ("c" "Calendar Pro" entry (file "~/Documents/Org_Files/calendar.org")
                     "* %?\n %^T"
		     :empty-lines 1)
		    ("m" "Mail" entry (file+headline "~/Documents/Org_Files/todo.org" "Mails")
		     "* %U %?"
		     :empty-lines 1)
		    ("j" "Journal Entry" entry (file+datetree "~/Documents/Org_Files/journal.org")
		     "* %? %^{Effort}p %^{TASK}p"
		     :empty-lines 1)
		     ))
	    

	    ;; System locale to use for formatting time values.
	    (setq system-time-locale "C")  ; Make sure that the weekdays in the
					; time stamps of your Org mode files and
					; in the agenda appear in English.

	    ;; prevent edit unseen text
	    (setq-default org-catch-invisible-edits 'show)

	    ;; Display image inline
	    (setq org-display-inline-images nil)
	    (setq org-image-actual-width nil)

	    ;; Export date correctly from: http://endlessparentheses.com/better-time-stamps-in-org-export.html
            (setq-default org-display-custom-times nil)
	    (setq org-time-stamp-custom-formats
	    	  '("<%A, %B %d, %Y>" . "<%A, %B %d, %Y %H:%M>"))

	    ;; ignore headlines  but include the text with the tab :ignore: usefull for the bibtex
	    (ox-extras-activate '(ignore-headlines))
	    )
  )
#+END_SRC

** Org-ref
#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :ensure t
  :init
  (setq org-ref-completion-library 'org-ref-ivy-cite)
  (setq reftex-default-bibliography '("/home/mfauvel/Documents/Recherche/INRA/Rapport/Bibliography/references.bib"))
  (setq org-ref-bibliography-notes "/home/mfauvel/Documents/Recherche/INRA/Rapport/Bibliography/notes.org"
	org-ref-default-bibliography '("/home/mfauvel/Documents/Recherche/INRA/Rapport/Bibliography/references.bib")
	org-ref-pdf-directory "/home/mfauvel/Documents/Recherche/INRA/Rapport/Bibliography/Pdfs/")
  (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator "-"
        bibtex-autokey-year-title-separator "-"
        bibtex-autokey-titleword-separator "-"
        bibtex-autokey-titlewords 2
        bibtex-autokey-titlewords-stretch 1
        bibtex-autokey-titleword-length 5)
  (global-set-key (kbd "C-c )") 'org-ref-ivy-insert-ref-link)
  (global-set-key (kbd "C-c ]") 'org-ref-ivy-insert-cite-link)
  )

#+END_SRC
** Calendar
I use  =calfw= and =org-gcal= to  synchronize my calendar.
#+BEGIN_SRC emacs-lisp 
(use-package calfw
  :ensure t
  :bind (("C-c b" . cfw:open-calendar-buffer)
	 ("C-c o" . cfw:open-org-calendar))
  :init (progn
	    (require 'calfw-org)
            (setq cfw:org-capture-template nil
		  calendar-week-start-day 1
                  cfw:org-overwrite-default-keybinding t)
	    )
  )
(use-package org-gcal
  :ensure t
  :config (progn
	    (setq org-gcal-client-id "680696705562-lrj1fk1nha7i6squ4uolhvd4ikj4va72.apps.googleusercontent.com"
		  org-gcal-client-secret "QYyHhLMv8uprO0W9IPAg8Rge"
		  org-gcal-file-alist '(("mathieu.fauvel@gmail.com" .  "/home/mfauvel/Documents/Org_Files/calendar.org"))
	          org-gcal-down-days 360
	    	  org-gcal-up-days 30
		  )
	    )
  )
(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
;;ID  680696705562-lrj1fk1nha7i6squ4uolhvd4ikj4va72.apps.googleusercontent.com
;; secret  eqo-Bh1VFGPy-yz2PdOLgVyI 4/Q_7-MLMMu-ecTIKXq8VAihLPXBaJKPx9tu6mt3_r1I8 
#+END_SRC

;;;### (autoloads nil "init" "init.el" (0 0 0 0))
;;; Generated autoloads from init.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "init" '("cycle-" "emacs-start-time" "mf/" "packages-refreshed?")))

;;;***
** Org-mind-map
#+BEGIN_SRC sh :tangle nil
wget -P org-mind-map https://raw.githubusercontent.com/theodorewiles/org-mind-map/master/org-mind-map.el
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(use-package org-mind-map
  ;; :load-path "/home/mfauvel/.emacs.d/org-mind-map/"
  :init  (require 'ox-org)
  :ensure t
  ;; Uncomment the below if 'ensure-system-packages` is installed
  ;;:ensure-system-package (gvgen . graphviz)
  :config
  ;; (setq org-mind-map-engine "dot")       ; Default. Directed Graph
  ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
  ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
  ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed 
  ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
  ;; (setq org-mind-map-engine "circo")  ; Circular Layout
  (setq org-mind-map-include-text t)
  )

#+END_SRC
** Org-kanban
#+BEGIN_SRC emacs-lisp
(use-package org-kanban
  :ensure t
  :after org
  :commands (org-kanban/initialize))
#+END_SRC
* Latex
** Auctex
#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
  :defer t
  :init
  (add-hook 'LaTeX-mode-hook 'auctex-latexmk-setup))

(use-package tex
  :ensure auctex
  :mode ("\\.tex\\'" . latex-mode)
  :commands (latex-mode LaTeX-mode plain-tex-mode)
  :init
  (progn
    (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
    (add-hook 'LaTeX-mode-hook #'visual-line-mode)
    (add-hook 'LaTeX-mode-hook #'flyspell-mode)
    (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook #'outline-minor-mode)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-save-query nil)
    (setq TeX-PDF-mode t)     
    (setq LaTeX-command-style '(("" "%(PDF)%(latex) -shell-escape %S%(PDFout)")))
    (setq-default TeX-master nil)
    (setq outline-minor-mode-prefix "C-c C-o"))
  )
#+END_SRC
** Bibtex
#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :mode ("\\.bib" . bibtex-mode)
  :init
  (progn
    (setq bibtex-align-at-equal-sign t)
    (add-hook 'bibtex-mode-hook (lambda () (set-fill-column 120)))))

#+END_SRC
** Reftex
#+BEGIN_SRC emacs-lisp
(use-package reftex
  :commands turn-on-reftex
  :init (progn (setq reftex-plug-into-AUCTeX t))
  )


#+END_SRC
* MU4E
#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :load-path "/usr/local/share/emacs/site-lisp/mu4e"
  :bind (("C-x m" . mu4e))
  :defer t
  :config (progn
	    (use-package mu4e-contrib
	    :load-path "/usr/local/share/emacs/site-lisp/mu4e")
	    (use-package smtpmail
	      :load-path "/usr/local/share/emacs/site-lisp/mu4e")
	    (use-package org-mu4e
	      :load-path "/usr/local/share/emacs/site-lisp/mu4e")
	    (use-package org-eldoc
	      :load-path "/usr/local/share/emacs/site-lisp/mu4e")
	    (setq mu4e-maildir "~/Maildir")
	    (setq mu4e-sent-folder   "/sent")
	    (setq mu4e-drafts-folder "/drafts")
	    (setq mu4e-trash-folder  "/trash")
	    
	    ;; allow for updating mail using 'U' in the main view:
	    (setq mu4e-get-mail-command "offlineimap")
	    
	    ;; show full addresses in view message (instead of just names)
	    ;; toggle per name with M-RET
	    (setq mu4e-view-show-addresses t)
	    
	    ;; set IMAP and update
	    (setq
	     mu4e-get-mail-command "offlineimap"   ;;
	     mu4e-update-interval 300)             ;; update every 5 minutes
	    
	    ;; something about ourselves
	    (setq mu4e-user-mail-address-list
		  '(
		    "mathieu.fauvel@inra.fr"
		    )
		  user-mail-address "mathieu.fauvel@inra.fr"
		  mu4e-reply-to-address "mathieu.fauvel@inra.fr"
		  user-full-name  "Mathieu Fauvel"
		  mu4e-compose-signature
		  (concat
		   "Fauvel Mathieu
Associated Editor IEEE Transactions on Geoscience and Remote Sensing
Coordinator of the European IEEE GRSS Chapters
Editorial Board Member MDPI Remote Sensing

http://fauvel.mathieu.free.fr

CESBIO (CNES/CNRS/UPS/IRD/INRA)
18, avenue Edouard Belin
31401 Toulouse Cedex 9, France

E-mail : mathieu.fauvel@inra.fr
"))
	    (setq message-send-mail-function 'smtpmail-send-it
		  starttls-use-gnutls t
		  smtpmail-starttls-credentials '(("smtp.inra.fr" 465 nil nil))
		  smtpmail-auth-credentials
		  '(("smtp.inra.fr" 465 "mfauvel" nil))
		  smtpmail-default-smtp-server "smtp.inra.fr"
		  smtpmail-smtp-server "smtp.inra.fr"
		  smtpmail-smtp-service 465
		  smtpmail-queue-mail  nil
		  smtpmail-queue-dir  "~/Maildir/queue/cur")
	    
					; don't keep message buffers around
	    (setq message-kill-buffer-on-exit t)
	    (setq mu4e-view-prefer-html t)
	    (setq mu4e-compose-dont-reply-to-self t)
	    
	    ;; Only to reflow my paragraphs
	    (setq mu4e-compose-format-flowed t)

	    (add-hook 'mu4e-view-mode-hook
		      (lambda()
			;; try to emulate some of the eww key-bindings
			(local-set-key (kbd "<tab>") 'shr-next-link)
			(local-set-key (kbd "<backtab>") 'shr-previous-link)))
	    
	    (add-to-list 'mu4e-view-actions
			 '("View in browser" . mu4e-action-view-in-browser) t)
	    
	    ;; make the `gnus-dired-mail-buffers' function also work on
	    ;; message-mode derived modes, such as mu4e-compose-mode
	    (defun gnus-dired-mail-buffers ()
	      "Return a list of active message buffers."
	      (let (buffers)
		(save-current-buffer
		  (dolist (buffer (buffer-list t))
		    (set-buffer buffer)
		    (when (and (derived-mode-p 'message-mode)
			       (null message-sent-message-via))
		      (push (buffer-name buffer) buffers))))
		(nreverse buffers)))
	    
	    (setq gnus-dired-mail-mode 'mu4e-user-agent)
	    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
	    
	    (setq mu4e-compose-keep-self-cc nil)
	    
	    ;; when mail is sent, automatically convert org body to HTML
	    (setq org-mu4e-convert-to-html t)
	    ;; need this to convert some e-mails properly
	    (setq mu4e-html2text-command "w3m -I utf8 -O utf8 -T text/html")
	    
	    (setq mu4e-msg2pdf "/usr/bin/msg2pdf")

	    ;; Add org table and org list structures to the message mode
	    (add-hook 'message-mode-hook 'turn-on-orgtbl)
	    (add-hook 'message-mode-hook 'turn-on-orgstruct++)

	    ;; Multiple attachments
	    (setq mu4e-save-multiple-attachments-without-asking t)

	    ;; View forwarded message
	    (setq mu4e-view-use-gnus t)
	    
	    )
  )

#+END_SRC
* Programming mode
** Python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :config (progn
	    (elpy-enable)
	    (setq python-shell-interpreter "ipython"
		  python-shell-interpreter-args "-i --simple-prompt")
	    )
  )
(setenv "PYTHONPATH" (shell-command-to-string "$SHELL -i -c 'echo $PYTHONPATH'"))
#+END_SRC
** CPP
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC
** Auto-complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init (progn
  (ac-config-default)
  (global-auto-complete-mode t)
  )
  )
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind (("C-x g". magit-status)
  )
)
#+END_SRC
** Hideshow
#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure t
  :defer t
  :bind (("C-c <left>" . hs-toggle-hiding)
	 ("C-c <right>" . hs-show-block)
	 )
  :init (add-hook 'prog-mode-hook #'hs-minor-mode)
  )

#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'ivy))
#+END_SRC
* Misc
** EMMS
Listen musing whith EMACS !

#+BEGIN_SRC emacs-lisp
(use-package emms-setup
  :config
  (emms-all)
  (emms-default-players)
  )

(use-package emms
  :ensure t
  :config (progn 
	    (emms-all)
	    (emms-history-load)	    
	    (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
	    (setq emms-source-file-default-directory "~/Musique/")
	    (setq emms-player-list '(emms-player-vlc-playlist
				     emms-player-vlc))
	    )
  :bind
  (("C-c e p" . emms-previous)
   ("C-c e n" . emms-next)
   ("C-c e P" . emms-pause)
   ("C-c e s" . emms-show)
   ("C-c e k" . emms-stop)
   ("C-c e +" . emms-volume-mode-plus)
   ("C-c e -" . emms-volume-mode-minus)
   ("C-c e S" . emms-play-playlist)))

#+END_SRC
** Weather
Yes, we can have the weather with EMACS !
#+BEGIN_SRC emacs-lisp
(use-package wttrin
  :ensure t
  :defer t
  :commands (wttrin)
  :bind (("C-x w". wttrin))
  :init
  (setq wttrin-default-cities '("Toulouse"
                                "Vicdessos"))
  (setq wttrin-default-accept-language '("Accept-Language" . "fr-Fr")))
#+END_SRC

* TO DO [85%]
- [X] regarder les mode latex et LaTex pour flyspell
- [X] set up gnus-dired
- [X] Configurer latex et outline mode
- [X] Rajouter =progn= pour tout les =:config=
- [X] Regarder le tutorial =helm= [[https://tuhdo.github.io/helm-intro.html]]
- [ ] Rajouter les emphasis sur plusieurs lignes dans =org=
- [X] Pour la capture
  - modifier le fichier d'écriture ?
  - rajouter les properties par défaut (projet ?)
